{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\salma\\\\react-course\\\\nextjs-advanced\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { useRouter } from \"next/router\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupdata.image,\n      title: props.meetupdata.title,\n      address: props.meetupdata.address,\n      description: props.meetupdata.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://salmanpary:salmandb@cluster0.ob2xn2v.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupscollection = db.collection('meetups');\n  const meetups = await meetupscollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupid = context.params.meetupId;\n  console.log(meetupid);\n  const client = await MongoClient.connect('mongodb+srv://salmanpary:salmandb@cluster0.ob2xn2v.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupscollection = db.collection('meetups');\n  const selectedmeetup = await meetupscollection.findOne({\n    _id: ObjectId(meetupid)\n  });\n  return {\n    props: {\n      meetupdata: {\n        id: selectedmeetup._id.toString()\n      }\n    }\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/salma/react-course/nextjs-advanced/pages/[meetupId]/index.js"],"names":["useRouter","MeetupDetail","MongoClient","ObjectId","HomePage","props","meetupdata","image","title","address","description","getStaticPaths","client","connect","db","meetupscollection","collection","meetups","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","meetupid","console","log","selectedmeetup","findOne","id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAAQC,WAAR,EAAoBC,QAApB,QAAmC,SAAnC;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD;;AACD,OAAO,eAAgBC,cAAhB,GAAgC;AACnC,QAAMC,MAAM,GAAC,MAAMV,WAAW,CAACW,OAAZ,CAAoB,6FAApB,CAAnB;AACI,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAACD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAxB;AACC,QAAMC,OAAO,GAAC,MAAOF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAArB;AACGR,EAAAA,MAAM,CAACS,KAAP;AACR,SAAO;AACHC,IAAAA,KAAK,EAACL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAG;AACvBC,MAAAA,MAAM,EAAC;AACJC,QAAAA,QAAQ,EAACF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AADL;AADgB,KAAH,CAAlB,CADH;AAMHC,IAAAA,QAAQ,EAAC;AANN,GAAP;AAQH;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMC,QAAQ,GAAGD,OAAO,CAACL,MAAR,CAAeC,QAAhC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAMnB,MAAM,GAAC,MAAMV,WAAW,CAACW,OAAZ,CAAoB,6FAApB,CAAnB;AACI,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AACA,QAAMC,iBAAiB,GAACD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAxB;AACA,QAAMkB,cAAc,GAAC,MAAMnB,iBAAiB,CAACoB,OAAlB,CAA0B;AAAChB,IAAAA,GAAG,EAAChB,QAAQ,CAAC4B,QAAD;AAAb,GAA1B,CAA3B;AAEN,SAAO;AACL1B,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR8B,QAAAA,EAAE,EAACF,cAAc,CAACf,GAAf,CAAmBQ,QAAnB;AADK;AADT;AADF,GAAP;AAOD;AACD,eAAevB,QAAf","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport {MongoClient,ObjectId} from 'mongodb'\r\nfunction HomePage(props) {\r\n  return (\r\n    <>\r\n      <MeetupDetail\r\n        image={props.meetupdata.image}\r\n        title={props.meetupdata.title}\r\n        address={props.meetupdata.address}\r\n        description={props.meetupdata.description}\r\n      />\r\n    </>\r\n  );\r\n}\r\nexport async function  getStaticPaths(){\r\n    const client=await MongoClient.connect('mongodb+srv://salmanpary:salmandb@cluster0.ob2xn2v.mongodb.net/?retryWrites=true&w=majority')\r\n        const db=client.db()\r\n        const meetupscollection=db.collection('meetups')\r\n         const meetups=await  meetupscollection.find({},{_id:1}).toArray()\r\n            client.close()\r\n    return {\r\n        paths:meetups.map(meetup=>({\r\n            params:{\r\n               meetupId:meetup._id.toString()\r\n            }\r\n        })),\r\n        fallback:false\r\n    }\r\n}\r\nexport async function getStaticProps(context) {\r\n    const meetupid = context.params.meetupId;\r\n    console.log(meetupid)\r\n    const client=await MongoClient.connect('mongodb+srv://salmanpary:salmandb@cluster0.ob2xn2v.mongodb.net/?retryWrites=true&w=majority')\r\n        const db=client.db()\r\n        const meetupscollection=db.collection('meetups')\r\n        const selectedmeetup=await meetupscollection.findOne({_id:ObjectId(meetupid)})\r\n     \r\n  return {\r\n    props: {\r\n        meetupdata: {\r\n            id:selectedmeetup._id.toString()\r\n        },\r\n    },\r\n  };\r\n}\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}